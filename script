// ==UserScript==
// @name         Quizizz GPT
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  integrates ChatGPT with Quizizz to answer questions
// @author       RannStudio
// @match        *://quizizz.com/join
// @match        *://quizizz.com/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=quizizz.com
// @grant        none
// @unwrap
// @require      https://code.jquery.com/jquery-3.7.1.min.js
// @require      https://cdn.jsdelivr.net/npm/sweetalert2@11
// ==/UserScript==

(function() {
    'use strict';

    const get_question = () => {
        const question = document.getElementsByClassName('question-text-color')[0].textContent;
        return question;
    };

    const get_answer = () => {
        let answer = [];
        try {
            const answer_container = document.getElementsByClassName('options-grid')[0];
            const answer_elements = answer_container.getElementsByClassName('option');
            for (var i = 0; i < answer_elements.length; i++) {
                answer.push(answer_elements[i].textContent);
            }
        } catch(err) {
            answer = null;
        }
        return answer;
    };

    const solve_question = async () => {
        try {
            const question = await get_question();
            const answer = await get_answer();
            let content;
            if (answer) {
                const choices = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                content = `Answer these questions and choose the correct answer:\nquestion:\n${question}\nanswer: ${answer.map((ans, index) => `${choices[index]}. ${ans}`).join('\n')}`;
            } else {
                content = `Answer this question briefly:\nquestion:\n${question}`;
            }

            const response = await fetch('https://cors-anywhere.ghgichat.workers.dev/?url=https://chateverywhere.app/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: {
                        id: 'gpt-3.5-turbo-0613',
                        name: 'GPT-3.5',
                        maxLength: 120,
                        tokenLimit: 400,
                        completionTokenLimit: 80
                    },
                    messages: [
                        {
                            pluginId: null,
                            role: 'user',
                            content: content
                        }
                    ],
                    prompt: content,
                    temperature: 0.3
                })
            });

            const responseData = await response.text();

            if (responseData && responseData.length > 0) {
                return responseData;
            } else {
                throw new Error('No response received from the new API.');
            }
        } catch (error) {
            throw error;
        }
    };

    function handleKeyRelease(event) {
        if (event.key === "/") {
            Swal.fire({
                html: 'Loading, please wait...',
                allowEscapeKey: false,
                allowOutsideClick: false,
                didOpen: async () => {
                    Swal.showLoading();
                    try {
                        const response = await solve_question();
                        Swal.fire({
                            html: response
                        });
                    } catch (error) {
                        if (error.message) {
                            Swal.fire('Oops!', error.message, 'error');
                        } else {
                            Swal.fire('Oops!', 'Something went wrong', 'error');
                        }
                    }
                }
            });
        }
    }
    document.addEventListener("keyup", handleKeyRelease);

    function checkServerStatus() {
        $.ajax({
            url: 'https://cors-anywhere.ghgichat.workers.dev/?url=https://example.com/',
            method: 'GET',
            success: function() {
                Swal.fire({
                    title: 'Quizizz GPT',
                    html: '<p style="text-align: left;">Please be advised that the responses generated by this bot may not always be accurate. Additionally, this bot is unable to interpret images.</p><br>' +
                    '<p style="text-align: left;"><b>How to Use:</b></p>' +
                    '<p style="text-align: left;">Press the "/" key on your keyboard to retrieve an answer.</p>'
                });
            },
            error: function() {
                Swal.fire({
                    title: 'Quizizz GPT',
                    html: 'server is currently waking up, please wait...',
                    timer: 5000,
                    timerProgressBar: true,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                setTimeout(checkServerStatus, 5000);
            }
        });
    }

    function waitForElm(selector) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }

            const observer = new MutationObserver(mutations => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    resolve(document.querySelector(selector));
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }

    waitForElm('.pause-icon').then((elm) => {
        checkServerStatus();
    });
})();
